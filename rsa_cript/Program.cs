using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Numerics;
using System.Diagnostics;

namespace rsa_cript
{
    class Program
    {
        static void Main(string[] args)
        {

            int primoP, primoQ;
            primoP = obtemPrimo();
            primoQ = obtemPrimo();

            int valorN = primoQ * primoP;

            int phi = (primoP - 1) * (primoQ - 1);

            int coprimeE = 3;

            while (coprimeE != 1)
            {
                coprimeE = gcd(phi, coprimeE);
            }

            int valorD = modInverse(coprimeE, phi);



            // coprimeE*valorD % phi = 1

            //Console.WriteLine(gcd(543654638, 3123416));

        }

        public string criptografa(string msg,int e, int N)
        {
            string novaMsg = "";
            foreach (char c in msg)
            {
                int novoVal = (int)Math.Pow(c, e) % N;

                novaMsg += (char)(novoVal);
            }

            return novaMsg;
        }

        public string decriptografa(string msg, int d, int N)
        {
            string novaMsg = "";
            foreach (char c in msg)
            {
                int novoVal = (int)Math.Pow(c, d) % N;

                novaMsg += (char)(novoVal);
            }

            return novaMsg;
        }


        static int modInverse(int a, int m)
        {
            int m0 = m;
            int y = 0, x = 1;

            if (m == 1)
                return 0;

            while (a > 1)
            {
                // q is quotient
                int q = a / m;

                int t = m;

                // m is remainder now, process
                // same as Euclid's algo
                m = a % m;
                a = t;
                t = y;

                // Update x and y
                y = x - q * y;
                x = t;
            }

            // Make x positive
            if (x < 0)
                x += m0;

            return x;
        }

        // Returns gcd of a and b
        static int gcd(int a, int b)
        {
            int aux;
            while (true)
            {
                aux = a % b;
                if (aux == 0)
                    return b;
                a = b;
                b = aux;
            }
            //return -1;
        }

        static public int obtemPrimo()
        {
            return 0;
        }

        //void t0()
        //{

        //    while (true)
        //    {
        //        Console.WriteLine("Numero:");
        //        string valor = "17272799357928762114637908013830544278901586162954764787674519202453329010913360996685542215533709682212676756166342859756635315054265751012851482831583610484712875928252593361282477174331727091758228749946305850201143360342253556575131944783446043196862799700307357470989044842781444290775397501576633427089877497775937163713830974684188062956988688428686345692443795044229899486997553249010840158194549508851662478440081963999768147673431070997102856782834646834574051177859181295203995229758008968685269643728847281891282704880698258690308189481167229771211238064784576797380376433347485490276915194018139577163827939972518183445094462909462449741567162472773692573498440087831688358549803442785091368320899800514181694755285757751835908149096691362264893277226848515487222196421486207432504132214785028377321709242529156538459158338346203484360179843070486693201000088373581949513632933650197281394136990201780561498418000721486974495725968707004067845473211158354302463437713321471829048791413845238002381896795068204129524732921416421332445528135902987828553826262059336685116897843763273165507629803493910101058248623992544929068186162778166813249900559257659312066195616949717628023838266894192201471741681007493712995483480718996958705541133919908446023773650985156438371601303460597065705963887243893139371471220791238749132483173265152815106783971591622401052707131257156266733979206566181940364062662621683889301266352589959619871686813553141168861641327229031572928616434281810267574656865797541755271428219964659656574984102022686112967191631318357483277751419437027195722691364531702940049694822626443167650718669707361266345345504257772005220401259195503722878629009581780907733545812020699931245970379737058145204529932911406724273351730226869913010325803662256597568729922396365048558954035346850078397053282812473836867386720246997289389650306911381075141633964605780771486058825196234060753584323457209319512426266429417698355066047089475471099761813926228312668893078052413328581544462191756824248210944338091843463842791228721034343018865659444468448856192498890257728886251684823179137986748596309987463142402677229688036739011765407321476103648552496435118729220799122287759328143667192434483336656072177901678344790959254454361184278110436653275555627413966378601816039952605602391451070910316416366884548632738158364994599194410270041251651551531198991590078389037600909639842908232891828829985173619186308160619572948611117179110898098324303469186925526121315731351536750490499884248516891995473157303844549016465473072836379551564087541306684325583942110683507032030709866840181376788255537517444110645662805774561703278865685969315844295293342832059880012375318144507451962764507269425293368288162441929951238510805978107435979716962889564989838139739230395694689636039569901017690583928307671965733409485179007549149601592729423714318516267653397228083381970232578459471976918176390358081719515892568896333696493756330691331100422965625873004106406441298572364505631450426570487763778105439868957637539273410230947898732200605838790443746541611519160572632581296027523074719653629431865271743466401304929383597180267448351028717273180113017707789923830043493520492929205920616578317845107405776989183743050660765000969327461173361209184123853358427736804867209835788798513797127680986693918206835011553459235708286470649778501027368998529623701188654185162073252743606978676903675746671491687366533501089744314770334748704953665900967538910504084650067677976281620009047888531814968459869691113400261133233094598694298187772369748139680667734041446829479470553663888845952746908559737495998067648127472301949693016046524010767696410980806071968419340922272808576921046224300399978676599937302982992770296284361276206684715244817179831459666955069353211637491271993945190517667541721185451237015037436996324479028280989082281886391688906461664044827768595737367244043111263600442012822904221367045074574017906329456856614967504447989377680960407769961152739490660353";
        //        Stopwatch s = new Stopwatch();
        //        s.Start();

        //        bool resul = IsPrimo2(BigInteger.Parse(valor), valor.Length);
        //        s.Stop();
        //        Console.WriteLine(resul ? "é primo" : "não é primo");
        //        Console.WriteLine(s.Elapsed);
        //        Console.ReadKey();
        //        Console.WriteLine();
        //        Stopwatch s2 = new Stopwatch();
        //        s2.Start();
        //        resul = IsPrimo(BigInteger.Parse(valor), valor.Length);
        //        s2.Stop();
        //        Console.WriteLine(resul ? "é primo" : "não é primo");
        //        Console.WriteLine(s2.Elapsed);
        //        Console.ReadKey();
        //    }

        //}

        //static bool IsPrimo(BigInteger n, int tam)
        //{
        //    if (n == 2 || n == 3)
        //        return true;

        //    if (n <= 1 || n % 2 == 0 || n % 3 == 0)
        //        return false;


        //    for (BigInteger i = 5; i * i <= n; i += 6)
        //    {
        //        if (n % i == 0 || n % (i + 2) == 0)
        //            return false;
        //    }

        //    return true;
        //}

        //static bool IsPrimo2(BigInteger n, int tam)
        //{
        //    if (n == 2 || n == 3)
        //        return true;

        //    if (n <= 1 || n % 2 == 0 || n % 3 == 0)
        //        return false;


        //    BigInteger raiz = nRapson(n, tam, 3);
        //    for (BigInteger i = 5; i <= raiz; i += 6)
        //    {
        //        if (n % i == 0 || n % (i + 2) == 0)
        //            return false;
        //    }

        //    return true;
        //}

        //static BigInteger nRapson(BigInteger valor, int tam, int iteras)
        //{
        //    BigInteger inicial = BigInteger.Pow(10, (int)Math.Ceiling(tam / 2.0));
        //    for (int i = 0; i < iteras; i++)
        //    {
        //        inicial = BigInteger.Divide(BigInteger.Divide(valor, inicial) + inicial, 2);
        //    }
        //    return inicial;
        //}

    }
}
